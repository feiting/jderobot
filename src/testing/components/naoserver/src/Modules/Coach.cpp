/**
 * @author fmartin
 * @author Carlos Ag√ºero (caguero@gsyc.es)
 *
 * Version : $Id$
 * This file was generated by Aldebaran Robotics ModuleGenerator
 */

#include "Coach.h"

#include <iostream>
#include <fstream>

//______________________________________________
// constructor
//______________________________________________
Coach::Coach(ALPtr<ALBroker> pBroker, const std::string& pName) :
ALModule(pBroker, pName) {
	setModuleDescription("This an autogenerated module, this description need to be updated.");

	cerr << begin_grey
			<< "\n\n-----------------------------\nNaoServer initializing"
			<< end_color << endl;

	try {
		AL::ALPtr<AL::ALMotionProxy> pmotion =
				getParentBroker()->getMotionProxy();
		pmotion->setStiffnesses("Body", 1.0);
	} catch (AL::ALError& e) {
		cerr << "Coach::Coach [motion]" << e.toString() << endl;
	}

	body = Body::getInstance();
	perception = Perception::getInstance();
	head = Head::getInstance();
	fsr = FSR::getInstance();
	kinematics = Kinematics::getInstance();
	kick = Kick::getInstance();

	servercamera = NaoServerCamera::getInstance();
	servermotors = NaoServerMotors::getInstance();
	serverencoders = NaoServerEncoders::getInstance();
	serverpose3dmotors = NaoServerPose3DMotors::getInstance();
	serverpose3dencoders = NaoServerPose3DEncoders::getInstance();
	sensorrecordernao = SensorRecorderNao::getInstance();

	body->init("Body", getParentBroker());
	head->init("Head", getParentBroker());
	fsr->init("Fsr", getParentBroker());
	kinematics->init("Kinematics", getParentBroker());
	kick->init("Kick", getParentBroker());
	perception->init("Perception", getParentBroker());

	servercamera->init("NaoServerCamera", getParentBroker());
	servermotors->init("NaoServerMotors", getParentBroker());
	serverencoders->init("NaoServerEncoders", getParentBroker());
	serverpose3dmotors->init("NaoServerPose3DMotors", getParentBroker());
	serverpose3dencoders->init("NaoServerPose3DEncoders", getParentBroker());
	sensorrecordernao->init("SensorRecorderNao", getParentBroker());

	csched = CascadeScheduler::getInstance();
	csched ->init();

	body->poseInit(0.3);

	myIcePort = 10002;

	// "The 'force' will show you your path
	cerr << begin_green << "NaoServer ready\n" << end_color;
	cerr << begin_grey << "Ice listening on " << begin_green << myIcePort << begin_grey
		<< " port..." << end_color << endl;
	cerr << begin_grey << "-----------------------------\n\n" << end_color
			<< endl;

/*	try
	{
		psentinel = getParentBroker()->getProxy("ALSentinel" );
		psentinel->callVoid("enableDefaultActionSimpleClick",false);
		psentinel->callVoid("enableDefaultActionDoubleClick",false);
		psentinel->callVoid("enableDefaultActionTripleClick",false);

	}catch( AL::ALError& e )
	{
		cerr<<"Coach::Coach [pfaceball]"<<e.toString()<<endl;
	}*/

	try {
			psonar = new ALSonarProxy(getParentBroker());

			ALValue params;
			params.arraySetSize(1);
			params[0] = 500;

			psonar->subscribe(getName(), 500, 1.0);

		} catch (ALError& e) {
			ostringstream s;
			s << "Fallen::init() [palinertial]" << e.toString() << endl;
		}


	try {
		palrobotpose = new ALRobotPoseProxy(getParentBroker());

		ALValue params;
		params.arraySetSize(1);
		params[0] = 500;

		//palrobotpose->subscribe(getName(), 500, 1.0);
	} catch (ALError& e) {
		ostringstream s;
		s << "Fallen::init() [palinertial]" << e.toString() << endl;
	}

	try {
		psensors = new ALSensorsProxy(getParentBroker());
		psensors->subscribe(getName(), 500, 1.0);
	} catch (ALError& e) {
		ostringstream s;
		s << "Fallen::init() [palinertial]" << e.toString() << endl;
	}

	pthread_create(&tIceServer, NULL, iceServerThread, &myIcePort);

	/*Start scheduler*/
	csched->run();
}

//______________________________________________
// destructor
//______________________________________________
Coach::~Coach() {
	try {
		psensors->unsubscribe(getName());

	} catch (ALError& e) {
		cerr << "Unable to activate " << getName() << ": " << e.toString()
																				<< endl;
	}
}

void* Coach::iceServerThread(void *obj)
{
	std::stringstream endpoint;
	int *icePort = (int *)obj;

	string str = "player";
	char* argv[2];
	argv[0] = new char[str.size() + 1];
	std::copy(str.begin(), str.end(), argv[0]);
	argv[0][str.size()] = '\0'; // don't forget the terminating 0

	str = "0";
	argv[1] = new char[str.size() + 1];
	std::copy(str.begin(), str.end(), argv[1]);
	argv[1][str.size()] = '\0'; // don't forget the terminating 0

	//char* argv[] = {name.c_str(), 0};
	int argc = 1;
	int status = 0;
	Ice::CommunicatorPtr ic;
	try {
		endpoint << "default -p " << *icePort;

		ic = Ice::initialize(argc, argv);
		Ice::ObjectAdapterPtr adapter	= ic->createObjectAdapterWithEndpoints("NaoServerAdapter", endpoint.str());

		adapter->add(NaoServerCamera::getInstance(), ic->stringToIdentity("Camera"));
		adapter->add(NaoServerMotors::getInstance(), ic->stringToIdentity("Motors"));
		adapter->add(NaoServerEncoders::getInstance(), ic->stringToIdentity("Encoders"));
		adapter->add(NaoServerPose3DMotors::getInstance(), ic->stringToIdentity("Pose3DMotors"));
		adapter->add(NaoServerPose3DEncoders::getInstance(), ic->stringToIdentity("Pose3DEncoders"));

		adapter->activate();
		ic->waitForShutdown();
	} catch (const Ice::Exception& e) {
		cerr << e << endl;
		status = 1;
	} catch (const char* msg) {
		cerr << msg << endl;
		status = 1;
	}
	if (ic) {
		try {
			ic->destroy();
		} catch (const Ice::Exception& e) {
			cerr << e << endl;
			status = 1;
		}
	}
	return &status;
}
